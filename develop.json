{"meta":{"generator":"0.12.1","format":30,"date":1707587881749},"classes":[{"name":"BaseClient","description":"The Base Client","extends":[[["EventEmitter"]]],"construct":{"name":"BaseClient","params":[{"name":"options","description":"The options to use","optional":true,"default":"{}","type":[[["defaultOptions"]]]}]},"props":[{"name":"options","description":"The options of the client.","scope":"instance","readonly":true,"type":[[["defaultOptions"]]],"meta":{"line":25,"file":"BaseClient.js","path":"src/client"}},{"name":"accessToken","description":"The access token which will be used to make requests to the Jellyfin API","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":31,"file":"BaseClient.js","path":"src/client"}},{"name":"serverId","description":"The server identifier","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"BaseClient.js","path":"src/client"}},{"name":"user","description":"The connected user of the client.","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":43,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"login","description":"Authenticate to the Jellyfin server\n\n<warn>The parameters should be kept private at all times.</warn>\n<info>You should use environment variables to keep it private.</info>\n\n<info>When authenticated, a {@link Client#ready} event is fired, you can also use promises like `then()` or `await` if you don't want to use events.</info>","scope":"instance","params":[{"name":"username","description":"The username of the user to authenticate","default":null,"nullable":true,"type":[[["string"]]]},{"name":"password","description":"The password of the user to authenticate","default":null,"nullable":true,"type":[[["string"]]]},{"name":"baseUrl","description":"The base URL of the Jellyfin server","default":null,"nullable":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}},{"name":"logout","description":"Disconnects from the Jellyfin server\n\n<info>When disconnected, a {@link Client#disconnected} event is fired, you can also use promises like `then()` or `await` if you don't want to use events.</info>","scope":"instance","async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}}],"meta":{"line":13,"file":"BaseClient.js","path":"src/client"}},{"name":"Client","description":"Instantiates a new client. This is the entry point.","extends":[[["BaseClient"]]],"construct":{"name":"Client","params":[{"name":"options","description":"The options to use","optional":true,"default":"{}","type":[[["defaultOptions"]]]}]},"props":[{"name":"options","description":"The options of the client.","scope":"instance","readonly":true,"type":[[["defaultOptions"]]],"meta":{"line":25,"file":"BaseClient.js","path":"src/client"}},{"name":"accessToken","description":"The access token which will be used to make requests to the Jellyfin API","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":31,"file":"BaseClient.js","path":"src/client"}},{"name":"serverId","description":"The server identifier","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"BaseClient.js","path":"src/client"}},{"name":"user","description":"The connected user of the client.","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":43,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"login","description":"Authenticate to the Jellyfin server\n\n<warn>The parameters should be kept private at all times.</warn>\n<info>You should use environment variables to keep it private.</info>\n\n<info>When authenticated, a {@link Client#ready} event is fired, you can also use promises like `then()` or `await` if you don't want to use events.</info>","scope":"instance","inherits":"BaseClient#login","inherited":true,"params":[{"name":"username","description":"The username of the user to authenticate","default":null,"nullable":true,"type":[[["string"]]]},{"name":"password","description":"The password of the user to authenticate","default":null,"nullable":true,"type":[[["string"]]]},{"name":"baseUrl","description":"The base URL of the Jellyfin server","default":null,"nullable":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}},{"name":"logout","description":"Disconnects from the Jellyfin server\n\n<info>When disconnected, a {@link Client#disconnected} event is fired, you can also use promises like `then()` or `await` if you don't want to use events.</info>","scope":"instance","inherits":"BaseClient#logout","inherited":true,"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}}],"events":[{"name":"ready","description":"Emitted when the client was authenticated successfully to the Jellyfin server.","meta":{"line":78,"file":"BaseClient.js","path":"src/client"}},{"name":"disconnected","description":"Emitted when the client was disconnected successfully to the Jellyfin server.","meta":{"line":102,"file":"BaseClient.js","path":"src/client"}},{"name":"apiRequest","description":"Emitted before every API request.\nThis event can emit several times for the same request, e.g. when hitting a rate limit.\n<info>This is an informational event that is emitted quite frequently,\nit is highly recommended to check `request.url` to filter the data.</info>","params":[{"name":"request","description":"The request that is about to be sent","type":[[["APIRequest"]]]}],"meta":{"line":41,"file":"APIRequest.js","path":"src/rest"}},{"name":"apiResponse","description":"Emitted after every API request has received a response.\nThis event does not necessarily correlate to completion of the request, e.g. when hitting a rate limit.\n<info>This is an informational event that is emitted quite frequently,\nit is highly recommended to check `request.url` to filter the data.</info>","params":[{"name":"request","description":"The request that triggered this response","type":[[["APIRequest"]]]},{"name":"response","description":"The response received from the API","type":[[["Response"]]]}],"meta":{"line":52,"file":"APIRequest.js","path":"src/rest"}}],"meta":{"line":8,"file":"Client.js","path":"src/client"}},{"name":"APIRequest","description":"APIRequest class","access":"private","construct":{"name":"APIRequest","params":[{"name":"client","description":"The client object","type":[[["BaseClient"]]]}]},"props":[{"name":"client","description":"The client that created this request","scope":"instance","readonly":true,"type":[[["BaseClient"]]],"meta":{"line":18,"file":"APIRequest.js","path":"src/rest"}}],"methods":[{"name":"do","description":"Makes a request to the API","scope":"instance","params":[{"name":"url","description":"The URL","type":[[["string"]]]},{"name":"method","description":"The method","optional":true,"default":"\"GET\"","type":[[["string"]]]},{"name":"body","description":"The body","optional":true,"default":null,"type":[[["Object"]]]}],"returns":[{"types":[[["Promise","<"],["Object",">"]]],"description":"The response"}],"meta":{"line":28,"file":"APIRequest.js","path":"src/rest"}}],"meta":{"line":8,"file":"APIRequest.js","path":"src/rest"}},{"name":"User","description":"Represents a user on Jellyfin.","props":[{"name":"client","description":"The client that instantiated this","scope":"instance","type":[[["Client"]]],"meta":{"line":11,"file":"User.js","path":"src/structures"}},{"name":"name","description":"The name of the user","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":25,"file":"User.js","path":"src/structures"}},{"name":"serverId","description":"The server identifier","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":33,"file":"User.js","path":"src/structures"}},{"name":"serverName","description":"The server name","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":41,"file":"User.js","path":"src/structures"}},{"name":"id","description":"The identifier","scope":"instance","type":[[["string"]]],"meta":{"line":49,"file":"User.js","path":"src/structures"}},{"name":"primaryImageTag","description":"The primary Image Tag","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":57,"file":"User.js","path":"src/structures"}},{"name":"hasPassword","description":"Whether this instance has password.","scope":"instance","type":[[["boolean"]]],"meta":{"line":65,"file":"User.js","path":"src/structures"}},{"name":"hasConfiguredPassword","description":"Whether this instance has configured password.","scope":"instance","type":[[["boolean"]]],"meta":{"line":73,"file":"User.js","path":"src/structures"}},{"name":"hasConfiguredEasyPassword","description":"Whether this instance has configured easy password.","scope":"instance","type":[[["boolean"]]],"meta":{"line":81,"file":"User.js","path":"src/structures"}},{"name":"enableAutoLogin","description":"Whether async login is enabled or not.","scope":"instance","type":[[["boolean"]]],"meta":{"line":89,"file":"User.js","path":"src/structures"}},{"name":"lastLoginDate","description":"The last login date.","scope":"instance","nullable":true,"type":[[["Date"]]],"meta":{"line":97,"file":"User.js","path":"src/structures"}},{"name":"lastActivityDate","description":"The last activity date.","scope":"instance","nullable":true,"type":[[["Date"]]],"meta":{"line":105,"file":"User.js","path":"src/structures"}},{"name":"configuration","description":"The User Configuration","scope":"instance","type":[[["UserConfiguration"]]],"meta":{"line":113,"file":"User.js","path":"src/structures"}},{"name":"policy","description":"The User Policy","scope":"instance","type":[[["UserPolicy"]]],"meta":{"line":121,"file":"User.js","path":"src/structures"}},{"name":"primaryImageAspectRatio","description":"The aspect ratio of the primary image.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":129,"file":"User.js","path":"src/structures"}},{"name":"User","description":"The raw data","scope":"static","access":"private","type":[[["object"]]],"meta":{"line":18,"file":"User.js","path":"src/structures"}}],"meta":{"line":4,"file":"User.js","path":"src/structures"}},{"name":"defaultOptions","description":"The default options.","props":[{"name":"baseUrl","description":"The default Jellyfin URL to use. It must contain the protocol. And should contain a subpath (ended with a slash), if there's one.\n\nIf present, this defaults to `process.env.JELLYFIN_URL` when instantiating the client","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":26,"file":"defaultOptions.js","path":"src/util"}},{"name":"username","description":"The Jellyfin Username to use.\nIf present, this defaults to `process.env.JELLYFIN_USERNAME` when instantiating the client","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"defaultOptions.js","path":"src/util"}},{"name":"password","description":"The Jellyfin Password to use.\nIf present, this defaults to `process.env.JELLYFIN_PASSWORD` when instantiating the client","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"defaultOptions.js","path":"src/util"}},{"name":"dev","description":"Whether is in dev mode (Uses more logging traces in the core).","scope":"instance","type":[[["boolean"]]],"meta":{"line":57,"file":"defaultOptions.js","path":"src/util"}},{"name":"clientInfo","description":"Client Info Options.","scope":"instance","type":[[["defaultOptionsClientInfo"]]],"meta":{"line":63,"file":"defaultOptions.js","path":"src/util"}},{"name":"deviceInfo","description":"Device Info Options.","scope":"instance","type":[[["defaultOptionsDeviceInfo"]]],"meta":{"line":69,"file":"defaultOptions.js","path":"src/util"}},{"name":"defaultOptions","description":"The base client instance.","scope":"static","access":"private","type":[[["BaseClient"]]],"meta":{"line":17,"file":"defaultOptions.js","path":"src/util"}}],"meta":{"line":9,"file":"defaultOptions.js","path":"src/util"}}],"functions":[{"name":"mergeDefault","description":"Sets default properties on an object that aren't already specified.","scope":"global","access":"private","params":[{"name":"def","description":"Default properties","type":[[["Object"]]]},{"name":"given","description":"Object to assign defaults to","type":[[["Object"]]]}],"returns":[[[["Object"]]]],"meta":{"line":8,"file":"Util.js","path":"src/util"}},{"name":"createEnum","description":"Create an enum from a list of strings.","scope":"global","access":"private","params":[{"name":"keys","type":[[["Array","<"],["string",">"]]]}],"returns":[[[["Object"]]]],"meta":{"line":26,"file":"Util.js","path":"src/util"}}],"interfaces":[],"typedefs":[{"name":"SubtitleModes","description":"All available subtitle playback modes.\n* `Default`\n* `Always`\n* `OnlyForced`\n* `None`\n* `Smart`","type":[[["\"Default\""]],[["\"Always\""]],[["\"OnlyForced\""]],[["\"None\""]],[["\"Smart\""]]],"meta":{"line":604,"file":"User.js","path":"src/structures"}},{"name":"AccessSchedules","type":[[["Object"]]],"props":[{"name":"Id","description":"The id of this instance.","type":[[["number"]]]},{"name":"UserId","description":"The id of the associated user.","type":[[["string"]]]},{"name":"DayOfWeek","description":"The day of week.","type":[[["\"Sunday\""]],[["\"Monday\""]],[["\"Tuesday\""]],[["\"Wednesday\""]],[["\"Thursday\""]],[["\"Friday\""]],[["\"Saturday\""]],[["\"Everyday\""]],[["\"Weekday\""]],[["\"Weekend\""]]]},{"name":"StartHour","description":"The start hour.","type":[[["number"]]]},{"name":"EndHour","description":"The end hour.","type":[[["number"]]]}],"meta":{"line":614,"file":"User.js","path":"src/structures"}},{"name":"BlockUnratedItems","description":"All available unrated items to block.\n* `Movie`\n* `Trailer`\n* `Series`\n* `Music`\n* `Book`\n* `LiveTvChannel`\n* `LiveTvProgram`\n* `ChannelContent`\n* `Other`","type":[[["\"Movie\""]],[["\"Trailer\""]],[["\"Series\""]],[["\"Music\""]],[["\"Book\""]],[["\"LiveTvChannel\""]],[["\"LiveTvProgram\""]],[["\"ChannelContent\""]],[["\"Other\""]]],"meta":{"line":623,"file":"User.js","path":"src/structures"}},{"name":"SyncPlayAccess","description":"All available SyncPlay access levels.\n* `CreateAndJoinGroups`\n* `JoinGroups`\n* `None`","type":[[["\"CreateAndJoinGroups\""]],[["\"JoinGroups\""]],[["\"None\""]]],"meta":{"line":637,"file":"User.js","path":"src/structures"}}],"externals":[],"custom":{}}